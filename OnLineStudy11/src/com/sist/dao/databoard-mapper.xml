<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- Mybatis plugin => 자동으로 기본 셋팅 -->
<!-- 
       mapper : SQL문장을 저장 
                PreparedStatement => 전송
                => 데이터 첨부 (?에 값을 채워주는 설정)
                   =================
                    parameterType
                ResultSet => 결과값을 받는다 
                => 어떤 클래스,변수로 받을지를 설정 
                   ============ resultType
                 
 -->
<mapper namespace="com.sist.dao.databoard-mapper">
  <!-- 
  		값을 읽어오는 부분 : SELECT 
		삭제 : delete , 수정 : update , 추가 : insert : 태그는 반드시 한개의 SQL문장만 설정 :CURD(Create(Insert) Update Read(Select) Delete)
		데이터 읽기 : 페이지를 나눠서 처리 : 인라인뷰  
  -->
  <!-- 
         id => 식별자 (중복이 되면 안된다) => 문자를 앞에서 시작 (숫자는 뒤에 올 수 있다)
         
         ? ==> 일반 데이터형 
               WHERE empno=?  => int
               WHERE ename=?  => String
         ? ? ? ? ? 
         ========= => Map , DataBoardVO
         
         예)
          <select id="a" resultType="int">
            SELECT empno FROM emp ==> 정수한개 
          </select>
          
          <select id="b" resultType="String">
            SELECT ename FROM emp
          </select>
          
          <select id="c" resultType="EmpVO"> ==> java.util.Map(VO에 존재하지 않는 변수가 있는 경우)
             SELECT * FROM emp   ==> 데이터 8개
          </select>
          
          <select id="d" resultType="java.util.Map">
            SELECT SUM(sal),AVG(sal),COUNT(*),MAX(sal),MIN(sal)
            FROM emp
          </select>
   -->
    
    
    
  <select id="boardListData" resultType="DataBoardVO" parameterType="hashmap">
     SELECT no,subject,name,TO_CHAR(regdate, 'YYYY-MM-DD')as dbday,hit,num 
     FROM (SELECT no,subject,name,regdate,hit,rownum as num 
     FROM (SELECT no,subject,name,regdate,hit 
     FROM databoard1 ORDER BY no DESC))
     WHERE num BETWEEN #{start} AND #{end}
     <!-- start , end => Map에 설정한 key이름 
     
         String sql= "SELECT no,subject,name,regdate,hit,num 
				     FROM (SELECT no,subject,name,regdate,hit,rownum as num 
				     FROM (SELECT no,subject,name,regdate,hit 
				     FROM databoard1 ORDER BY no DESC))
				     WHERE num BETWEEN ? AND ?"
	     
	     ps=conn.preparedStatement(sql);
	     // 실행하지 전에  ?에 값을 채운다 
	     ps.setInt(1,map.get("start")); ==> parameterType
	     ps.setInt(2,map.get("end"))
	     ==> Map
	     map.put("end",10);
	     map.put("start",1);
	     
	     ResultSet rs=ps.executeQuery();
	     while(rs.next())
	     {
	         DataBoardVO vo=new DataBoardVO(); => resultType
	     }
     -->
  </select>
  
  
  
  <select id="boardTotalPage" resultType="int">
    SELECT CEIL(COUNT(*)/10.0) FROM databoard1
  </select>
  
  
  
  <!-- 내용보기 : 다운로드 -->
  <!-- 중복된 문장이 있는 경우 처리 : 재사용 -->
  <sql id="where-no">
  	WHERE no=#{no}
  </sql>
  
	  <!-- 조회수 증가 -->
	  <update id="hitIncrement" parameterType="int">
	    UPDATE databoard1 SET
	    hit=hit+1
	    <include refid="where-no"/>
	  </update>
	  <!-- 실제 데이터 읽기 -->
  	  <select id="boardDetailData" resultType="DataBoardVO" parameterType="int">
  	    SELECT no,name,subject,content,TO_CHAR(regdate, 'YYYY-MM-DD') as dbday,hit,filename,filesize
  	    FROM databoard1
  	    <include refid="where-no"/>
  	  </select>
  
  
  
  <!-- 추가  -->
	  <!-- DataBoardVO  #{name} vo.getName() , #{pwd} vo.getPwd()
	  	   Map에 데이터를 묶어서 전송 할 수도 있고, VO에 데이터를 묶어서 전송 할 수도 있다. -->

	  
	  <insert id="boardInsert" parameterType="DataBoardVO">
	    INSERT INTO databoard1 VALUES(
	      (SELECT NVL(MAX(no)+1,1) FROM databoard1),#{name},#{subject},
	      #{content},#{pwd},SYSDATE,0,#{filename},#{filesize}
	    )
	  </insert>
		<!-- Sequence 정석임 -->
		<!-- 
		<insert id="boardInsert" parameterType="DataBoardVO">
		 <selectKey keyProperty="no" resultType="int" order="BEFORE">
		   SELECT NVL(MAX(no)+1,1) FROM databoard1
		 </selectKey>
		   INSERT INTO databoard1 VALUES(
		   #{name},
		   #{subject},
		   #{content},
		   #{pwd},
		   SYSDATE,
		   0,
		   #{filename},
		   #{filesize}
		   )
		</insert>
 		-->



  <!-- 수정하기 -->
  <update id="boardUpdate" parameterType="DataBoardVO">
    UPDATE databoard1 SET
    name=#{name},
    subject=#{subject},
    content=#{content}
    <include refid="where-no"/><!-- WHERE no=#{no} -->
  </update>
  
  
  
 	<!-- 삭제하기 -->
  <!-- 비밀번호 확인 -->
  <select id="boardGetPassword" resultType="String" parameterType="int">
    SELECT pwd FROM databoard1
    <include refid="where-no"/>
  </select>
  
  <!-- 게시물이 삭제가 되면 업로드된 파일을 삭제 -->
  
  <select id="boardGetInfoData" resultType="DataBoardVO" parameterType="int">
    SELECT filename,filesize FROM databoard1
    <include refid="where-no"/>
  </select>
  
  <!-- 본인일 경우에는 게시물을 삭제 -->
  <delete id="boardDelete" parameterType="int">
    DELETE FROM databoard1
    <include refid="where-no"/>
  </delete>
  
  
  
  <!-- 찾기 -->
  <!-- 
          ${fd} => 컬럼명,테이블명  (name LIKE , subject LIKE, content LIKE)
          #{ss} => 일반 데이터 
   -->
  <select id="boardFindData" resultType="DataBoardVO" parameterType="hashmap">
  	SELECT no,subject,name,TO_CHAR(regdate,'YYYY-MM-DD') as dbday, hit
  	FROM databoard1
  	WHERE ${fd} LIKE '%'||#{ss}||'%'
  </select>
  <select id="boardFindCount" resultType="int" parameterType="hashmap">
  	SELECT COUNT(*)
  	FROM databoard1
  	WHERE ${fd} LIKE '%'||#{ss}||'%'
  </select>
  
  
</mapper>